{"Additional-Docker-foo":{"title":"Additional Docker-foo","links":[],"tags":[],"content":"Checking if your docker image is running §\nOnce you have run your docker image, you can check whether it is running using docker ps in your terminal. The output lists containers, the container ID, image tag, and other information of the running docker containers.\nAfter running the CSCI 442 docker you should see the following output:\nCONTAINER ID   IMAGE                      COMMAND                  CREATED         STATUS         PORTS     NAMES\n827db10a6ab4   csci442mines/student-env   &quot;/bin/sh -c &#039;tail -f…&quot;   3 seconds ago   Up 2 seconds             csci442-env\n\nEnter the docker container from the terminal §\nAfter running your docker image, you might be wondering how we can see files and execute commands inside the docker. You can enter a docker container from the terminal using either:\n\ndocker exec -it &lt;container ID&gt; bash. Example: docker exec -it 827b bash\ndocker exec -it &lt;container name&gt; bash. Example: docker exec -it csci442-env bash\n\nIf you are unsure of the container name or container ID you can find these using docker ps.\nAfter running this command you should see the following in your terminal.\nroot@827db10a6ab4:/#\n\nThis prompt is now inside your docker container. You can see the container ID (in this case 827db10…) in the terminal prompt. To see files inside the container, navigate the container, or run project code inside the container you can interact with this terminal like you would a normal Linux system.\nStopping a docker container §\nTo stop a running docker container use either:\n\ndocker kill &lt;container ID&gt;. Example: docker kill 827b\ndocker kill &lt;container name&gt;. Example: docker kill csci442-env\n\nVERY IMPORTANT: The state inside a docker container will be LOST after killing the container. All files in the container which are not in a mounted folder will be LOST once a container is killed. To prevent losing your files, store all files in a folder which is associated with a bind mount.\nRemoving containers §\nAfter killing a container, artifacts of this container will remain on your system using up disk space. To see old exited containers use docker ps -a. You output should look like this:\nCONTAINER ID   IMAGE                      COMMAND                   CREATED             STATUS                         PORTS     NAMES\n827db10a6ab4   csci442mines/student-env   &quot;/bin/sh -c &#039;tail -f…&quot;    29 minutes ago      Exited (137) 5 seconds ago               csci442-env\n\nTo remove these old container use either:\n\ndocker rm &lt;container ID&gt;. Example: docker rm 827b\ndocker rm &lt;container name&gt;. Example: docker rm csci442-env\n"},"Additional-Reccomended-Setup":{"title":"Additional Reccomended Setup","links":["Using-Visual-Studio-Code"],"tags":[],"content":"\nOpen a terminal, either in vscode (see: Using Visual Studio Code), or by running docker exec -it operating_systems bash. All commands in this part of the guide will use the terminal inside the container.\nFollow GitHub’s guide for setting up SSH keys, make sure to use the Linux tab. Follow the sections under “Generating a new SSH key” and “Adding your SSH key to the ssh-agent”.\n\nMake sure to follow the guide for adding a new SSH key to your GitHub account.\n\n\nNavigate to you CSCI 442 workspace, inside this workspace folder clone the project repository from GitHub.\n$ cd projects; git clone git@github.com:CSCI-442-Mines/f23-project-1-&lt;username&gt;.git\n\n\n"},"CSCI442-Student-Environment":{"title":"CSCI442 Student Environment","links":["Setting-Up-The-Docker-Container","Using-Visual-Studio-Code","Additional-Docker-foo"],"tags":[],"content":"What is Docker §\nDocker is a tool that allows developers to easily deploy their applications in a sandbox (called containers) to run on the host operating system. The key benefit of Docker is that it allows users to package an application with all of its dependencies into a standardized unit for software development. Unlike virtual machines, containers do not have high overhead and hence enable more efficient usage of the underlying system and resources.\nWhat are containers §\nContainer are used to run software as an alternative to virtual machine. Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based applications to be deployed easily and consistently. Containers provide most of the isolation of virtual machines at a fraction of the computing power.\nWhat are images §\nThe blueprints of our application which form the basis of containers.\nHow is CSCI 442 using Docker §\nWe are using docker to allow you to setup an isolated Linux environment with all the necessary packages for CSCI 442 projects. This will allow you to run your CSCI 442 code in a Linux environment regardless of your computer’s OS. We will give you a docker image which sets up an environment identical to the autograder which ensures that your code will run inside this docker with the same result output as on the autograder. See below for steps to set up the CSCI 442 docker.\nGuides §\n\nSetting Up The Docker Container\nUsing Visual Studio Code\nAdditional Docker-foo\n"},"Setting-Up-The-Docker-Container":{"title":"Setting Up The Docker Container","links":[],"tags":[],"content":"Download Docker Engine §\nFirst download and setup Docker Engine using the instructions at the link below for your OS:\n\nWindows: windows-install\nMac: mac-install\nLinux: install\n\nNote: DO NOT install Docker Desktop for Linux, rather, select your Linux distribution on the left sidebar and follow the distribution specific instructions for Docker engine. Docker Desktop runs with a different environment in Linux, and we may not be able to support it.\nRemember to follow the post-installation steps for Linux: linux-postinstall\nFor Linux specific issues with Docker, feel free to email TA Luke Beukelman (lukebeukelman@mines.edu).\n\n\n\nOpen a new terminal on your computer and verify that your docker installation is working by running the following command:\n$ docker run hello-world\n\nIf you docker installation is working you should get the following output:\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n...\n\nPulling the CSCI 442 docker §\nYou will need to download the CSCI 442 docker image from the Docker Hub. To do this open your terminal and run:\n$ docker pull csci442mines/student-env\n\nYou should now have the docker image on your computer. To verify you can run the following command to see all available images on your machine:\n$ docker images\n\nIn the output of this command should be listed the CSCI 442 docker image:\nREPOSITORY                 TAG       IMAGE ID       CREATED        SIZE\ncsci442mines/student-env   latest    84f85651e5f1   20 hours ago   1.71GB\n\nInitial Container Creation §\nNow that you have the Docker image pulled, you can now create the container that you will be developing in.\nThe docker run family of commands helps in the creation of creating docker containers. Most of the initial settings for the docker container are set in this step, and can not be changed afterwards.\nThe command you will run in is as follows:\n$ docker run -d --name operating_systems  --mount type=bind,source=&lt;path to where you want to store csci442 files on your local computer&gt;,target=/root/projects csci442mines/student-env\n\nTo break down the command:\n\ndocker run is the command and sub-command to run a new docker image.\n-d runs the container in detached mode, as opposed to running it in the foreground, making it so your terminal will not wait for the docker container to shut down.\n--mount type=bind,source=&lt;path to where you want to store csci442 files on your local computer&gt;,target=/root/projects creates a bind mount, which makes it so that the changes in your Docker container are preserved on your computer, outside of the container. This makes it harder to lose your work!\ncsci442mines/student-env is the name of the image that you are creating a container from.\n\nWe do not recommend deleting your Docker container.  This will delete everything inside of it, except for what is saved in the bind mount. However, if you accidentally do, follow this part of the guide again.\nSequential Container Runs §\nEvery time you shut down your computer, or simply shut down the Docker container, you will need to start it back up again to use it. In some applications, it is useful to just re-create the Docker container every time you need it, but that would lead to file changes (except for bind mounts) not being saved (not ideal for coding!).\nInstead, we will just restart the Docker container we initially created when we need it. To do this, simply run the command:\n$ docker start operating_systems\n\nAlternatively, in the Docker tab in vscode, you can also just right click the container, and click “Start”.\n"},"Using-Visual-Studio-Code":{"title":"Using Visual Studio Code","links":[],"tags":[],"content":"If you prefer a graphical IDE, VSCode has excellent support for Docker.\nPrerequisites §\n\nYou’ve followed the basic docker setup tutorial described above\nYou’ve installed VSCode\nYou’ve installed the “Remote Development” and “Docker” extensions within VSCode\n\nConnecting to Your Container §\n\nNavigate to the Docker menu (A whale with cubes on the left side of the window)\nFind csci442mines/student-env in the “Individual Containers” list. It should be in the “Containers” section at the top of the pane.\nRight-click on csci442mines/student-env and select “Attach Visual Studio Code” (if you don’t see that option, press “Start” in the right-click menu and try again)\nYou are now connected to the container and can use VSCode as normal. If you followed the docker setup instructions, your cloned repository should be in /root/projects.\n\nDebugging §\nVSCode allows you to graphically debug C and C++. Start by installing the “C/C++” extension. This extension will give you autocomplete and better syntax highlighting in addition to debugging capabilities. The debugger takes information about how to run your project from the file .vscode/launch.json.\nExample Debugger Configuration §\nCreate the file .vscode/launch.json and paste in the below.\n{\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;(gdb) Launch&quot;,\n            &quot;type&quot;: &quot;cppdbg&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;program&quot;: &quot;${workspaceFolder}/reverse&quot;,\n            &quot;args&quot;: [ &quot;tests/5.in&quot; ],\n            &quot;stopAtEntry&quot;: false,\n            &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,\n            &quot;environment&quot;: [],\n            &quot;externalConsole&quot;: false,\n            &quot;MIMode&quot;: &quot;gdb&quot;,\n            &quot;setupCommands&quot;: [\n                {\n                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,\n                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,\n                    &quot;ignoreFailures&quot;: true\n                }\n            ]\n        }\n    ]\n}\nUsing the Debugger §\nThe “Run and Debug” pane is accessed by clicking the play button covered by the bug on the left hand side of the window. Select (gdb) Launch to the right of the green play button, then press the button to start the debugger.\nThe debugger will pause on any breakpoints that have been set. To set breakpoints, right-click to the left of the line number on which you wish to break. The debugger will pause before that line is executed. The contents of variables will be displayed in the “Run and Debug” pane.\nWhen the debugger is running, a control strip will appear.\n\nThe function of each button (from left to right) is\n\nContinue - Execute normally until another breakpoint is reached\nStep Over - Execute the next line, then pause\nStep Into - Pause at the beginning of the function invoked by the current line\nStep Out - Execute the remainder of the current function, then pause after the line that called it\nRestart - Start the entire program over from the beginning\nStop - Stop the program\n\nChanging Debugger Behavior §\nThe launch.json file given above will run project 1 with input tests/5.in. You will need to modify it to debug other projects or use other test cases.\nThe args value sets command line arguments for the program being debugged. To test with the file tests/4.in instead of tests/5.in, change args to [ &quot;tests/4.in&quot; ]. The args value is an array, so you can have multiple values for projects that take more than one parameter (e.g. [ &quot;--some-flag&quot;, &quot;tests/5.in&quot; ]).\nTo debug a different project, the name of the executable needs to be changed. This is controlled by the program value. The executable for project 1 is called reverse so program is set to ${workspaceFolder}/reverse. For project 2, the executable is called shell, so program should be set to ${workspaceFolder}/shell."},"images/debugger_controls.png":{"title":"debugger_controls.png","links":[],"tags":[],"content":""}}