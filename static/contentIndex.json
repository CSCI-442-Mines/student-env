{"index":{"title":"CSCI 442 student environment","links":["guides/Setting-Up-The-Docker-Container","guides/Setting-Up-Your-Projects-Inside-the-Docker-Container","references/Avoiding-Data-Loss-and-Other-Important-Notes","references/Using-Visual-Studio-Code","references/Additional-Docker-foo"],"tags":[],"content":"What is Docker §\nDocker is a tool that allows developers to easily deploy their applications in a sandbox (called containers) to run on the host operating system. The key benefit of Docker is that it allows users to package an application with all of its dependencies into a standardized unit for software development. Unlike virtual machines, containers do not have high overhead and hence enable more efficient usage of the underlying system and resources.\nWhat are containers §\nContainer are used to run software as an alternative to virtual machine. Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based applications to be deployed easily and consistently. Containers provide most of the isolation of virtual machines at a fraction of the computing power.\nWhat are images §\nThe blueprints of our application which form the basis of containers.\nHow is CSCI 442 using Docker §\nWe are using docker to allow you to setup an isolated Linux environment with all the necessary packages for CSCI 442 projects. This will allow you to run your CSCI 442 code in a Linux environment regardless of your computer’s OS. We will give you a docker image which sets up an environment identical to the autograder which ensures that your code will run inside this docker with the same result output as on the autograder. See below for steps to set up the CSCI 442 docker.\nGuides §\n\nSetting Up The Docker Container\nSetting Up Your Projects Inside the Docker Container\n\nOther Useful Information §\n\nAvoiding Data Loss and Other Important Notes (Mandatory and extremely important)\nUsing Visual Studio Code (Very highly recommended)\nAdditional Docker-foo\n"},"guides/Setting-Up-The-Docker-Container":{"title":"Setting Up The Docker Container","links":["guides/Setting-Up-The-Docker-Container","references/Avoiding-Data-Loss-and-Other-Important-Notes","references/Using-Visual-Studio-Code","references/Opening-a-Docker-Container's-Terminal"],"tags":[],"content":"Create your directory to store your projects in §\nWe recommend creating a directory on your computer called OS_Projects, in which your projects will be synced with your Docker container. We recommend you place the folder in the following paths, depending on your operating system, for consistency.\n\nWindows: will be set up automatically in a later step.\nMacOS and Linux: under your home directory: /home/&lt;username&gt;/OS_Projects.\n\nDownload Docker §\nFor Windows and Mac, you will download Docker Desktop. For Linux, you will download Docker Engine. This is for historical reasons regarding the workarounds that were needed to port Docker to Mac and Windows.\nFirst download and setup Docker Engine using the instructions at the link below for your OS:\n\nWindows: windows-install\nMac: mac-install\nLinux: install\n\nNote: DO NOT install Docker Desktop for Linux, rather, select your Linux distribution on the left sidebar and follow the distribution specific instructions for Docker engine. Docker Desktop runs with a different environment in Linux, and we may not be able to support it.\nRemember to follow the post-installation steps for Linux: linux-postinstall\nFor Linux specific issues with Docker, feel free to email TA Luke Beukelman (lukebeukelman@mines.edu).\n\n\n\nOpen a new terminal on your computer. You should have used your computer’s terminal in prior courses, but to ensure consistency:\n\nWindows: use cmd, aka Command Prompt\nMacOS: use terminal\nLinux: depends on specific distribution, you should know what your terminal is if you are using Linux :).\n\n\nVerify that your docker installation is working by running the following command:\n$ docker run hello-world\n\nIf your docker installation is working you should get the following output:\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n...\n\nPulling the CSCI 442 docker §\nYou will need to download the CSCI 442 docker image from the Docker Hub. To do this open your terminal and run:\n$ docker pull csci442mines/student-env\n\nYou should now have the docker image on your computer. To verify you can run the following command to see all available images on your machine:\n$ docker images\n\nIn the output of this command should be listed the CSCI 442 docker image:\nREPOSITORY                 TAG       IMAGE ID       CREATED        SIZE\ncsci442mines/student-env   latest    84f85651e5f1   20 hours ago   1.71GB\n\nInitial Container Creation §\nNow that you have the Docker image pulled, you can now create the container that you will be developing in.\nThe docker run family of commands helps in the creation of creating docker containers. Most of the initial settings for the docker container are set in this step, and can not be changed afterwards.\nThe command you will run in is as follows:\n$ docker run -d --name operating_systems  --mount type=bind,source=&lt;local sync path&gt;,target=/root/projects csci442mines/student-env\n\nIf you followed our guidance on the location for your local sync path, it should look like this for Windows (this is where the folder is automatically created):\n$ cd %HomePath%\n$ docker run -d --name operating_systems  --mount type=bind,source=&quot;%cd%\\OS_projects&quot;,target=/root/projects csci442mines/student-env\n\nOr like this for MacOS/Linux:\n$ docker run -d --name operating_systems  --mount type=bind,source=/home/&lt;username&gt;/OS_Projects,target=/root/projects csci442mines/student-env\n\nTo break down the command:\n\n\ndocker run is the command and sub-command to run a new docker image.\n\n\n-d runs the container in detached mode, as opposed to running it in the foreground, making it so your terminal will not wait for the docker container to shut down.\n\n\n--mount type=bind,source=&lt;path to where you want to store csci442 files on your local computer&gt;,target=/root/projects creates a bind mount, which makes it so that the changes in your Docker container are preserved on your computer, outside of the container. This makes it harder to lose your work!\n\nInside the container, your project files will be under /root/projects.\nOn your local computer the project files will be sync’ed into a folder named OS_Projects, wherever you created it in accordance with our guidance in Create your directory to store your projects in.\n\n\n\ncsci442mines/student-env is the name of the image that you are creating a container from.\n\n\n\nNote: You will use “docker run” command only once in the entire semester, unless you delete the container.\nNote: We do not recommend deleting your Docker container (see: Do not delete your Docker container!!!!!).  This will delete everything inside of it, except for what is saved in the bind mount. However, if you accidentally do, follow this part of the guide again.\nSequential Container Runs §\nEvery time you shut down your computer, or simply shut down the Docker container, you will need to start it back up again to use it. In some applications, it is useful to just re-create the Docker container every time you need it, but that would lead to file changes (except for bind mounts) not being saved (not ideal for coding!).\nInstead, we will just restart the Docker container we initially created when we need it. To do this, simply run the command:\n$ docker start operating_systems\n\nThis command only runs the Docker container in the background. To access the container, you will either want to open it in VSCode (Using Visual Studio Code), or in a terminal (Opening a Docker Container’s Terminal).\nAlternatively, in the Docker tab in vscode, you can also just right click the container, and click “Start”.\n"},"guides/Setting-Up-Your-Projects-Inside-the-Docker-Container":{"title":"Setting Up Your Projects Inside the Docker Container","links":["references/Opening-a-Docker-Container's-Terminal","references/Using-Visual-Studio-Code"],"tags":[],"content":"Before following this guide, you need access to your Docker container’s terminal in order to run these commands. The reference guide, Opening a Docker Container’s Terminal will help with this.\nOne time  GitHub key setup §\n\nFollow GitHub’s guide for setting up SSH keys, make sure to use the Linux tab. Follow the sections under “Generating a new SSH key” and “Adding your SSH key to the ssh-agent”.\nMake sure to follow the guide for adding a new SSH key to your GitHub account if you haven’t already.\n\nNote: to print your public key (note: do not print or copy your private key… EVER!), you can run: cat ~/.ssh/id_rsa.pub;\nFor example (throwaway, good luck using this key for anything).\n\n\n\n\nPer-project Setup §\n\nCreate a github project instance by clicking on the github classroom invitation in the canvas assignment\nClone project starter files into your container\n$ cd /root/projects; git clone git@github.com:CSCI-442-Mines/f23-project-1-&lt;username&gt;.git\n\n\n\nDeveloping your code §\n\nAfter cloning the project, your project files will be under /root/projects/f23-project-1-&lt;username&gt;.git.\nCompile your code by running $ make.\nRun the binary that is specific to the project (for project 1 it is ./reverse).\nImplement the project via your favorite editor (guides here are supplied for VSCode, see Using Visual Studio Code).\nAt the end of any programming session, or whenever you make any progress you want to save (feature complete, partially implemented, or you just don’t want to lose work), run git commit -a &amp;&amp; git push in order to save your changes to you git repository.\n\nWe STRONGLY recommend doing this frequently, so you do not lose your work.\nIt happens every semester where someone forgets to commit some major work and loses several hours of work, you don’t want to be that person.\n\n\nTake your screenshot to upload to deliverable 1 once the D1 requirements are complete.\n"},"references/Additional-Docker-foo":{"title":"Additional Docker-foo","links":["references/Avoiding-Data-Loss-and-Other-Important-Notes"],"tags":[],"content":"Checking if your docker container is running §\nOnce you have run your docker image, you can check whether it is running using docker ps in your terminal. The output lists containers, the container ID, image tag, and other information of the running docker containers.\nAfter running the CSCI 442 docker you should see the following output:\nCONTAINER ID   IMAGE                      COMMAND                  CREATED         STATUS         PORTS     NAMES\n827db10a6ab4   csci442mines/student-env   &quot;/bin/sh -c &#039;tail -f…&quot;   3 seconds ago   Up 2 seconds             csci442-env\n\nEnter the docker container from the terminal §\nAfter running your docker image, you might be wondering how we can see files and execute commands inside the docker. You can enter a docker container from the terminal using :\n\ndocker exec -it &lt;container name&gt; bash. Example: docker exec -it operating_systems bash\n\nIf you are unsure of the container name or container ID you can find these using docker ps.\nAfter running this command you should see the following in your terminal.\nroot@827db10a6ab4:/#\n\nThis prompt is now inside your docker container. You can see the container ID (in this case 827db10…) in the terminal prompt. To see files inside the container, navigate the container, or run project code inside the container you can interact with this terminal like you would a normal Linux system.\nStopping a docker container §\nTo stop a running docker container use either:\n\ndocker kill &lt;container ID&gt;. Example: docker kill 827b\ndocker kill &lt;container name&gt;. Example: docker kill csci442-env\n\nVERY IMPORTANT: The state inside a docker container will be LOST after killing the container. All files in the container which are not in a mounted folder will be LOST once a container is killed. To prevent losing your files, store all files in a folder which is associated with a bind mount.\nRemoving containers §\nAfter killing a container, artifacts of this container will remain on your system using up disk space. To see old exited containers use docker ps -a. You output should look like this:\nCONTAINER ID   IMAGE                      COMMAND                   CREATED             STATUS                         PORTS     NAMES\n827db10a6ab4   csci442mines/student-env   &quot;/bin/sh -c &#039;tail -f…&quot;    29 minutes ago      Exited (137) 5 seconds ago               csci442-env\n\nTo remove these old container use either:\n\ndocker rm &lt;container ID&gt;. Example: docker rm 827b\ndocker rm &lt;container name&gt;. Example: docker rm csci442-env\n\nWe do not recommend removing your docker container until after the semester is over, as that will result in data loss. See Do not delete your Docker container!!!!!."},"references/Avoiding-Data-Loss-and-Other-Important-Notes":{"title":"Avoiding Data Loss and Other Important Notes","links":[],"tags":[],"content":"Graceful Exit §\nWhile your changes will most likely be saved to disk, it is never good to risk an abrupt shutdown of anything when avoidable. There may be some process that is accessing a file, and an abrupt shutdown may corrupt that file (and your work).\nIn order to avoid this, you can gracefully shut your docker container down by either running docker stop operating_systems, or by right clicking the container in the VSCode docker tab, and pressing “Stop”. In either case, wait for the Docker container to completely stop before continuing (for vscode, wait for the icon to go to a red square, for terminal, wait for a new line to appear for continued terminal input, indicating that the docker stop command completed).\nUse Git!!!! §\nYou learned this in software engineering for a reason! Git is an essential tool for software development, and should be used frequently. Fortunately, you don’t have to worry about merge conflicts in this course, so you can just commit, push, and move on :).\nIn case you forgot how to do so, you can commit and push your changes by running.\n$ git commit -a &amp;&amp; git push\n\nIf you are using VSCode, you can also use the handy source control interface for handling git. Here is a tutorial.\nDo not delete your Docker container!!!!! §\nIf you have a circumstance where you feel you may need to delete the container, you may want to ask a TA first. Deleteing a container deletes the files in the container, including anything not synced to Git or to your local machine, such as configuration files for vscode, vim, ssh/git, etc..\nIf you accidentally delete your Docker container, you will have to restart this guide, and hope that you took the proper measures to ensure no data loss.\nDo not delete the OS_projects folder on your local device §\nThis is where the projects should sync with your local computer’s file system if you are properly set up. Deleting this may be worse than deleting the Docker container, because it contains all of your work that is not synced to Git. Don’t do it!"},"references/Opening-a-Docker-Container's-Terminal":{"title":"Opening a Docker Container's Terminal","links":["references/Using-Visual-Studio-Code","references/Additional-Docker-foo"],"tags":[],"content":"VSCode Terminal §\n\nFollow the instructions under Setup.\nOn the top header bar, click Terminal &gt; New Terminal.\n\nWhat is shown on my computer as Ctrl+Shift+` is the keyboard shortcut I can use to create a new terminal. Learn whatever shortcut your computer has for faster access!\n\n\n\nYou should now have a terminal inside VSCode that is running bash!\n\n\nOther Terminals §\nIf you decide not to use VSCode (we HIGHLY recommend you do for your ease during this class), you will have to access the Docker container terminal through your Operating Systems terminal. These are as follows:\n\nWindows: cmd (aka Command Prompt)\nMacOS: terminal\nLinux: depends on the Linux distribution. If you are using Linux, you should know this :).\n\n\n\nOpen your terminal.\n\n\nIf you have not already started your Docker container, run:\n$ docker start operating_systems```\n\n\nYou can check this, see: Checking if your docker container is running.\n\n\n\nOnce your docker container is running, run:\n$ docker exec -it operating_systems bash\n\nWhich will open a new bash shell, from within the docker container!\n\n\n"},"references/Using-Visual-Studio-Code":{"title":"Using Visual Studio Code","links":["guides/Setting-Up-The-Docker-Container"],"tags":[],"content":"If you prefer a graphical IDE, VSCode has excellent support for Docker.\nSetup §\nPrerequisites §\n\nYou’ve followed the first step for setup, Setting Up The Docker Container.\nYou’ve installed VSCode\nYou’ve installed the “Remote Development” and “Docker” extensions within VSCode\n\nExtensions can be found under the tab that looks like this:\n\n\n\n\nConnecting to Your Container §\n\nNavigate to the Docker menu (A whale with cubes on the left side of the window)\nFind csci442mines/student-env in the “Individual Containers” list. It should be in the “Containers” section at the top of the pane.\nRight-click on csci442mines/student-env and select “Attach Visual Studio Code” (if you don’t see that option, press “Start” in the right-click menu and try again)\nYou are now connected to the container and can use VSCode as normal. If you followed the docker setup instructions, your cloned repository should be in /root/projects.\n\nDebugging §\nVSCode allows you to graphically debug C and C++. Start by installing the “C/C++” extension. This extension will give you autocomplete and better syntax highlighting in addition to debugging capabilities. The debugger takes information about how to run your project from the file .vscode/launch.json.\nExample Debugger Configuration §\nCreate the file .vscode/launch.json and paste in the below.\n{\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;(gdb) Launch&quot;,\n            &quot;type&quot;: &quot;cppdbg&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;program&quot;: &quot;${workspaceFolder}/reverse&quot;,\n            &quot;args&quot;: [ &quot;tests/5.in&quot; ],\n            &quot;stopAtEntry&quot;: false,\n            &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,\n            &quot;environment&quot;: [],\n            &quot;externalConsole&quot;: false,\n            &quot;MIMode&quot;: &quot;gdb&quot;,\n            &quot;setupCommands&quot;: [\n                {\n                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,\n                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,\n                    &quot;ignoreFailures&quot;: true\n                }\n            ]\n        }\n    ]\n}\nUsing the Debugger §\nThe “Run and Debug” pane is accessed by clicking the play button covered by the bug on the left hand side of the window. Select (gdb) Launch to the right of the green play button, then press the button to start the debugger.\nThe debugger will pause on any breakpoints that have been set. To set breakpoints, right-click to the left of the line number on which you wish to break. The debugger will pause before that line is executed. The contents of variables will be displayed in the “Run and Debug” pane.\nWhen the debugger is running, a control strip will appear.\n\nThe function of each button (from left to right) is\n\nContinue - Execute normally until another breakpoint is reached\nStep Over - Execute the next line, then pause\nStep Into - Pause at the beginning of the function invoked by the current line\nStep Out - Execute the remainder of the current function, then pause after the line that called it\nRestart - Start the entire program over from the beginning\nStop - Stop the program\n\nChanging Debugger Behavior §\nThe launch.json file given above will run project 1 with input tests/5.in. You will need to modify it to debug other projects or use other test cases.\nThe args value sets command line arguments for the program being debugged. To test with the file tests/4.in instead of tests/5.in, change args to [ &quot;tests/4.in&quot; ]. The args value is an array, so you can have multiple values for projects that take more than one parameter (e.g. [ &quot;--some-flag&quot;, &quot;tests/5.in&quot; ]).\nTo debug a different project, the name of the executable needs to be changed. This is controlled by the program value. The executable for project 1 is called reverse so program is set to ${workspaceFolder}/reverse. For project 2, the executable is called shell, so program should be set to ${workspaceFolder}/shell."}}